{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nexport default function useCachedResources() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHideAsync();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, FontAwesome.font), {}, {\n                'space-mono': require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n                'open-sans': require(\"../assets/fonts/OpenSans-Regular.ttf\"),\n                'inter-semiBold': require(\"../assets/fonts/Inter-SemiBold.ttf\"),\n                'inter-regular': require(\"../assets/fonts/Inter-Regular.ttf\"),\n                'roboto-bold': require(\"../assets/fonts/Roboto-Bold.ttf\"),\n                'open-semi-bold': require(\"../assets/fonts/OpenSans-SemiBold.ttf\"),\n                'open-sans-bold': require(\"../assets/fonts/OpenSans-Bold.ttf\"),\n                'lato-bold': require(\"../assets/fonts/Lato-Bold.ttf\"),\n                'inter-font-bold': require(\"../assets/fonts/Inter-Bold.ttf\"),\n                'roboto-medium': require(\"../assets/fonts/Roboto-Medium.ttf\")\n              })));\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 9:\n              _context.prev = 9;\n              setLoadingComplete(true);\n              SplashScreen.hideAsync();\n              return _context.finish(9);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6, 9, 13]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["C:/Users/mirta/Desktop/Projekt R-mobilna/SpaceInvaders/hooks/useCachedResources.ts"],"names":["FontAwesome","Font","SplashScreen","React","useCachedResources","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","preventAutoHideAsync","loadAsync","font","require","console","warn","hideAsync"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,wBAAgDD,KAAK,CAACE,QAAN,CAAe,KAAf,CAAhD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,kBAA1B;;AAGAJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIP,cAAAA,YAAY,CAACQ,oBAAb;AAFJ;AAAA,+CAKUT,IAAI,CAACU,SAAL,iCACDX,WAAW,CAACY,IADX;AAEJ,8BAAcC,OAAO,yCAFjB;AAGJ,6BAAaA,OAAO,wCAHhB;AAIJ,kCAAkBA,OAAO,sCAJrB;AAKJ,iCAAiBA,OAAO,qCALpB;AAMJ,+BAAeA,OAAO,mCANlB;AAOJ,kCAAkBA,OAAO,yCAPrB;AAQJ,kCAAkBA,OAAO,qCARrB;AASJ,6BAAaA,OAAO,iCAThB;AAUJ,mCAAmBA,OAAO,kCAVtB;AAWJ,iCAAiBA,OAAO;AAXpB,iBALV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBIC,cAAAA,OAAO,CAACC,IAAR;;AApBJ;AAAA;AAsBIR,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAL,cAAAA,YAAY,CAACc,SAAb;AAvBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BAP,IAAAA,yBAAyB;AAC1B,GA7BD,EA6BG,EA7BH;AA+BA,SAAOH,iBAAP;AACD","sourcesContent":["import { FontAwesome } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\nimport * as React from 'react';\r\n\r\nexport default function useCachedResources() {\r\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  React.useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHideAsync();\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...FontAwesome.font,\r\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\r\n          'open-sans': require('../assets/fonts/OpenSans-Regular.ttf'),\r\n          'inter-semiBold': require('../assets/fonts/Inter-SemiBold.ttf'),\r\n          'inter-regular': require('../assets/fonts/Inter-Regular.ttf'),\r\n          'roboto-bold': require('../assets/fonts/Roboto-Bold.ttf'),\r\n          'open-semi-bold': require('../assets/fonts/OpenSans-SemiBold.ttf'),\r\n          'open-sans-bold': require('../assets/fonts/OpenSans-Bold.ttf'),\r\n          'lato-bold': require('../assets/fonts/Lato-Bold.ttf'),\r\n          'inter-font-bold': require('../assets/fonts/Inter-Bold.ttf'),\r\n          'roboto-medium': require('../assets/fonts/Roboto-Medium.ttf'),\r\n        });\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hideAsync();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  return isLoadingComplete;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}